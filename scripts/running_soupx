#!/bin/bash

set -euo pipefail

sample_list=""
input_path=""
output_path=""

while getopts :s:i:o:v:rnh opt
do
    case "$opt" in
    s)
      sample_list=$OPTARG
      ;;
    i)
      input_path=$OPTARG
      ;;
    o)
      output_path=$OPTARG
      ;;
    h)
      cat <<EOU
-s sample list to analyse
-i path to directory containing all samples
-o path to output location
-h displays this message!
EOU
      exit
            ;;
    :) echo "Flag $OPTARG needs argument"
        exit 1;;
    ?) echo "Flag $OPTARG unknown"              
        exit 1;;
   esac
done

image=/lustre/scratch117/cellgen/cellgeni/TIC-starsolo/tic-1586/actions/python3.8.2-scanpy1.9.1-pandas1.4.3-r.4.1.3-soupx1.5.2.sif
mount_options="/lustre,/nfs"
scanpy="/lustre/scratch117/cellgen/cellgeni/TIC-starsolo/tic-1586/actions/scanpy_clustering"
soupx="/lustre/scratch117/cellgen/cellgeni/TIC-starsolo/tic-1586/actions/soupx_script"
#outputs results to new soupx directory within each samples output directory
gene_choices=("Gene" "GeneFull")
cat $sample_list | while read sample; do
  for choice in "${gene_choices[@]}"; do
    mkdir -p $output_path/$sample/output/$choice/soupx_results
    echo "Running scanpy clustering for $sample with $choice"
    /software/singularity-v3.5.3/bin/singularity exec -B $mount_options $image \
      python $scanpy -s=$sample -i=$input_path/$sample/output/$choice/filtered -o=$output_path/$sample/output/$choice/soupx_results
    echo "Completed scanpy clustering for $sample with $choice"
    echo "Running soupx for $sample with $choice"
    /software/singularity-v3.5.3/bin/singularity exec -B $mount_options $image \
      Rscript $soupx --raw=$input_path/$sample/output/$choice/raw --filtered=$input_path/$sample/output/$choice/filtered \
      --clusters=$output_path/$sample/output/$choice/soupx_results/clusters.tsv --output=$output_path/$sample/output/$choice/soupx_results
    echo "Completed soupx for $sample with $choice";
  done;
done
